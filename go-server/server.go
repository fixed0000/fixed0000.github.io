package main

import (
	"flag"          // Для обработки флагов командной строки
	"log"           // Для вывода логов
	"net/http"      // Основной пакет для работы с HTTP
	"os"            // Для работы с операционной системой (получение текущей директории)
	"path/filepath" // Для работы с путями к файлам
)

func main() {
	// --- Настройка флагов ---
	// Флаг -p для указания порта (по умолчанию 8080)
	port := flag.String("p", "8080", "Порт для запуска сервера")
	// Флаг -d для указания директории с файлами сайта (по умолчанию текущая директория)
	dir := flag.String("d", ".", "Директория со статическими файлами сайта")
	flag.Parse() // Разбираем флаги, переданные при запуске

	// --- Определение директории для раздачи ---
	serveDir, err := filepath.Abs(*dir) // Получаем абсолютный путь к директории
	if err != nil {
		log.Fatalf("Ошибка определения абсолютного пути для директории %s: %v", *dir, err)
	}

	// Проверяем, существует ли директория
	if _, err := os.Stat(serveDir); os.IsNotExist(err) {
		log.Fatalf("Указанная директория '%s' не найдена.", serveDir)
	}

	// --- Создание файлового сервера ---
	// http.Dir(serveDir) создает файловую систему для указанной директории
	// http.FileServer создает обработчик, который раздает файлы из этой файловой системы
	fileServer := http.FileServer(http.Dir(serveDir))

	// --- Регистрация обработчика ---
	// Регистрируем наш файловый сервер для обработки всех запросов к корню ("/")
	http.Handle("/", fileServer)

	// --- Запуск сервера ---
	serverAddr := ":" + *port // Формируем адрес сервера (например, ":8080")
	log.Printf("Запуск статического сервера для директории: %s", serveDir)
	log.Printf("Сервер доступен по адресу: http://localhost%s", serverAddr)

	// Запускаем HTTP сервер и слушаем указанный порт
	// Если произойдет ошибка при запуске (например, порт занят), выводим ее и завершаем программу
	err = http.ListenAndServe(serverAddr, nil)
	if err != nil {
		log.Fatalf("Ошибка запуска сервера: %v", err)
	}
}
